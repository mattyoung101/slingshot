/*
 * Copyright (c) 2023 Matt Young.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

package slingshot.completion

import org.eclipse.lsp4j.CompletionItem
import org.eclipse.lsp4j.CompletionItemKind
import org.tinylog.kotlin.Logger
import slingshot.parsing.CompletionTypes
import slingshot.parsing.SvDocument


/**
 * Using a list of [CompletionTypes] recommendations generated by CursorParseTreeVisitor, and a
 * [SvDocument], generate the actual completion items by analysing the SvDocument instance.
 */
class CompletionSelector(private val completion: CompletionResult) {
    private fun generateVariableSameModule(): List<CompletionItem> {
        completion.activeModule ?: return listOf()
        return completion.document.getModuleByName(completion.activeModule).variables.map {
            CompletionItem(it.name).apply { kind = CompletionItemKind.Variable }
        }
    }

    private fun generatePortSameModule(): List<CompletionItem> {
        completion.activeModule ?: return listOf()
        return completion.document.getModuleByName(completion.activeModule).ports.map {
            CompletionItem(it.name).apply { kind = CompletionItemKind.Field }
        }
    }

    fun generate(): List<CompletionItem> {
        val out = mutableListOf<CompletionItem>()

        for (rec in completion.recommendations) {
            when (rec) {
                CompletionTypes.VariableSameModule -> out.addAll(generateVariableSameModule())
                CompletionTypes.PortSameModule -> out.addAll(generatePortSameModule())
                else -> Logger.warn("Unhandled recommendation type: $rec")
            }
        }

        Logger.debug("Completion items: $out")

        return out
    }
}